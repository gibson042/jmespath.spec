test0:
  context: &data
    foo: -1
    zero: 0
    numbers: [-1, 3, 4, 5]
    array: [-1, 3, 4, 5, a, '100']
    strings: [a, b, c]
    decimals: [1.01, 1.2, -1.5]
    str: Str
    'false': false
    empty_list: []
    empty_hash: {}
    objects: {foo: bar, bar: baz}
    null_key:
  query: unknown_function(`1`, `2`)
  error: unknown-function
test1:
  context: *data
  query: '"to_string"(`1.0`)'
  error: syntax
test2:
  context: *data
  query: numbers[].to_string(@)
  returns: ['-1', '3', '4', '5']
  comment: function projection on single arg function
test3:
  context: *data
  query: array[].to_number(@)
  returns: [-1, 3, 4, 5, 100]
  comment: function projection on single arg function
test4:
  context:
    foo: [{b: b, a: a}, {c: c, b: b}, {d: d, c: c}, {e: e, d: d}, {f: f, e: e}]
  query: foo[].not_null(f, e, d, c, b, a)
  returns: [b, c, d, e, f]
  comment: function projection on variadic function
nested_let1:
  context: &given_nested
    a: {mylist: [{l1: '1', result: foo}, {l2: '2', result: bar}, {l1: '8', l2: '9'},
        {l1: '8', l2: '9'}], level2: '2'}
    level1: '1'
    nested: {a: {b: {c: {fourth: fourth}, third: third}, second: second}, first: first}
    precedence: {a: {b: {c: {variable: fourth}, variable: third, other: y}, variable: second,
        other: x}, variable: first, other: w}
  comment: "Precedence of lexical vars from scope object"
  query: "precedence.let({other: other}, &a.let({other: other}, &b.let({other: other}, &c.{other: other})))"
  returns:
    other: y
nested_let2:
  context: *given_nested
  comment: "Precedence of lexical vars from current object"
  query: "precedence.let({variable: variable}, &a.let({variable: variable}, &b.let({variable: variable}, &c.let({variable: `\"override\"`}, &variable))))"
  returns: "fourth"